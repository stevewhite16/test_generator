?plot
plot(x,y,xlab="The x variable",ylab="The y variable",main="X vs Y")
plot(x,y,xlab="The x variable",ylab="The y variable",main="X vs Y",sub="the subtitle here")
pdf("Figure1.pdf")
t?
.
?t
?outer
matrix(1:4)
A <- matrix(1:4,nrows=2)
A <- matrix(1:4,nrow=2)
B <- matrix(5:8,nrow=2)
outer(A,B)
outer(1:4,5:8)
outer(t(1:4),5:8)
load.package(ISLR)
install.package(ISLR)
package.install(ISLR)
?package
?install
?load
fix(A)
fix(B)
quit()
source('~/ProgrammingAssignment2/cachematrix.R')
source('~/ProgrammingAssignment2/cachematrix.R')
m <- makeCacheMatrix(matrix(rnorm(625,0,1),nrow=25))
inv <- m$getinv()
m$getinv()
inv <- cacheSolve(m)
inv <- cacheSolve(m)
rows <- 1000
m <- makeCacheMatrix(matrix(rnorm(rows^2,0,1),nrow=rows))
inv <- cacheSolve(m)
inv <- cacheSolve(m)
inv
source('~/.active-rstudio-document')
install.package("ISLR")
install.packages("ISLR")
library(ISLR)
fix(Boston)
library(MASS)
names(Boston)
?Boston
attach(Boston)
lm.fit(mdev~lstat)
lm.fit <- lm(mdev~lstat)
attach(Boston)
lm.fit <- lm(medv~lstat)
lm.fit
summary(lm.fit)
names(lm.fit)
lm.fit$coefficients
coef(lm.fit)
confint(lm.fit)
lm.fit$df.residual
predict(lm.fit,lm.fit$lstat,interval="confidence")
xhat <- predict(lm.fit,lm.fit$lstat,interval="confidence")
head(xhat)
head(cbind(lstat,xhat))
head(cbind(lm.fit$lstat,xhat))
xhat <- predict(lm.fit,Boston$lstat,interval="confidence")
xhat <- predict(lm.fit,Boston,interval="confidence")
head(xhat)
plot(lstat,mdev)
plot(lstat,medv)
abline(lm.fit)
par(mfrow=c(2,2))
plot(lm.fit)
install.packages("car")
?summary(lm.fit)
?summary.lm
?summary(lm.fit)
lm.fit <- lm(medv~lstat*black)
lm.fit
summary(lm.fit)
?anova
printX <- function(x=0) {}
printX <- function(x=0) {
print(x)
}
printX
printx()
printX <- function(x=0) {
x
}
printX()
printX(5)
print(5)
print(x)
x<-2
print(x)
attach(cars)
names(cars)
attach(CARS)
attach(carseats)
attach(Carseats)
names(Carseats)
lm.fit.car <- lm(Price~.-"US")
head(data)
lm.fit.car <- lm(Price~.-US)
attach(Carseats)
lm.fit.car <- lm(Price~.-US)
lm.fit.car <- lm(Price~.-US, data=Carseats)
summary(lm.fit.car)
install.packages("kernlab")
library(XML)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml","restaurants.xml",method="curl")
doc <- xmlTreeParse(fileURL, useInternal=TRUE)
doc <- xmlTreeParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", useInternal=TRUE)
doc <- xmlTreeParse("restaurants.xml", useInternal=TRUE)
head(doc)
doc
?xmlvalue
?xmlValue
?xmlSApply
data <- xmlSApply(doc, xmlValue)
?xmlSApply
rootNode <- xmlRoot(doc)
data <- xmlSApply(rootNode, xmlValue)
data
?xmlvalue
?xmlValue
?xpathSApply
data <- xmlSApply(rootNode,"//zipcode" xmlValue)
data <- xpathSApply(rootNode,"//zipcode" xmlValue)
zipcodes <- xpathSApply(doc,"//zipcode",xmlValue)
sum(zipcodes == "21231")
install_from_swirl("Getting and Cleaning Data")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
?data
install.package(knitr)
install.packages(knitr)
library(datasets)
data(iris)
apply(iris, mean, na.rm=TRUE)
apply(iris, FUN=mean, na.rm=TRUE)
?apply
apply(iris, FUN=mean, MARGIN=2, na.rm=TRUE)
?lapply
?sapply
sapply(iris, mean, na.rm=TRUE)
colmeans(iris)
colMeans(iris)
apply(iris[, 1:4], 2, mean)
data(mtcars)
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
x<-tapply(mtcars$hp, mtcars$cyl, mean)
abs(x[3]-x[1])
debug(ls)
ls
ls()
.
exit
exit()
./
d;dk
quit
d
quit()
library(datasets)
ls()
data(iris)
tapply(iris$Sepal.Length, iris$Species, mean)
library(ISLR)
data(Smarket)
names(Smarket)
dim(Smarket)
str(Smarket)
summary(Smarket)
table(Smarket$Direction)
attach(Smarket)
corr()
cor()
cor(Smarket)
cor(Smarket[,-9])
cor(Smarket[,-9])
predict_today <- lm.fit(Today ~ Lag*)
?lm.fit
?lm
predict_today <- lmit(Today ~ Lag*)
predict_today <- lm(Today ~ Lag*)
predict_today <- lm(Today ~ Lag*, Smarket)
predict_today <- lm(Today ~ . - Year - Volume, Smarket)
predict_today
summary(predict)
summary(predict_today)
predict_today <- lm(Today ~ . - Year - Volume -DirectionUp, Smarket)
predict_today <- lm(Today ~ . - Year - Volume -Direction, Smarket)
summary(predict_today)
plot(Volume)
polt(Volume, Year)
plot(Volume, Year)
plot(Volume)
glm(formula = Direction ~ .-Year - Today - Volume, data = Smarket, family=binomial(logit))
logistic.fit <- glm(formula = Direction ~ .-Year - Today - Volume, data = Smarket, family=binomial(logit))
summary(logistic.fit)
?glm
?predict
predictions <- predict(logistic.fit)
str(predictions)
predictions <- predict(logistic.fit, Smarket[,2:6])
str(predictions)
predictions <- predict(logistic.fit, t(c(1,1,1,1,1)))
predictions <- predict(logistic.fit, data.frame(t(c(1,1,1,1,1))))
?knn
library(MASS)
?knn
library(class)
?knn
data.frame(c(1,2,3),c(1,2,3))
x <- data.frame(c(1,2,3),c(4,5,6))
y <- data.frame(c(7,8,9),c(10,11,12))
rbind(x,y)
names(x)
names(y)
names(y) <- names(x)
names(y)
rbind(x,y)
z <- rbind(x,y)
rm(x,y)
z
names(z) <- c("var1","var2")
z
id(z)
str(z)
rnames(z)
?rownames
rownames(z)
rownames(z) <- c("person1","other.guy","test","more","name","who cares?")
z
awesome
library(ISLR)
fix(Hitters)
attach(Hitters)
names(Hitters)
dim(Hitters)
sum(is.na(Hitters$Salary))
Hitters <- na.omit(Hitters)
dim(Hitters)
sum(is.na(Hitters))
library(leaps)
library("leaps")
install.packages("leaps")
library(leaps)
model.baseball <- regsubsets(Salary~., data=Hitters, nvmax=19)
summary(model.baseball)
model.baseball$rsq
model.baseball$rsq
names(model.baseball)
model.summary <- summary(model.baseball)
names(model.summary)
model.summary$rsq
mfrow=c(2,2)
plot(model.summary$rss, xlab="Number of Variables", ylab="RSS", type="l")
plot(model.summary$adj2, xlab="Number of Variables", ylab="Adj R^2", type="l")
plot(model.summary$adj2)
plot(model.summary$adjr2, xlab="Number of Variables", ylab="Adj R^2", type="l")
max <- which.max(model.summary$adjr2)
points(max, model.summary$adjr2[max], col="blue")
mfrow=c(2,2)
plot(model.baseball, scale="r2")
plot(model.baseball, scale="Cp")
plot(model.baseball, scale="bic")
coef(model.basebball, 6)
coef(model.baseball, 6)
set.seed(1)
train <- sample(c(TRUE,FALSE), nrow(Hitters), rep=FALSE)
train <- sample(c(TRUE,FALSE), nrow(Hitters), rep=TRUE)
test <- !train
library(ISLR)
data(Auto)
names(Auto)
auto.model <- lm(mpg ~ weight, data=Auto)
summary(auto.model)
fit.auto.model <- function {}
fit.auto.model <- function {
boot(Auto, fit.auto.model, 1000)
source('~/.active-rstudio-document')
?lm
function(x) {}
get_x <- function(x) {
return x
}
return(lm(mpg ~ weight, data, subset=index))
boot_est <- boot(Auto, fit.auto.model, 1000)
library(boot)
source('~/learning_boot.R')
rm(ls=ls())
rm(ls())
?rm
rm(list = ls())
source('~/.active-rstudio-document')
summary(boot_est)
boot_est
summary(lm(mpg ~ weight, Auto))
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
?xpathSapply
?xpathSApply
source('~/Desktop/scarping_drugs.com.R')
summary(user_comments)
user_comments
?getNodeSet
source('~/Desktop/scarping_drugs.com.R')
reviews
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
data.frame(ratings, comments, for_disease)
install.packages("pwr")
source('~/GitHub/remind_experiment/power_analysis_theory.R')
pwr.t.test(n=n1+n2, d=d, sig.level=0.05, type=type)
source('~/GitHub/remind_experiment/power_analysis_theory.R')
pwr.t.test(n=n1+n2, d=d, sig.level=0.05, type=type)
pwr.t.test(n=n1, d=d, sig.level=0.05, type=type)
pwr.t2n.test(n1=n1, n2=n2, sig.level=0.05, d=d)
pwr.f2.test(u=800, v=30, f2=0.01, sig.level=0.02)
pwr.f2.test(u=800, v=30, f2=0.01, sig.level=0.05)
pwr.f2.test(u=800, v=30, f2=0.02, sig.level=0.05)
pwr.f2.test(u=800, v=20, f2=0.02, sig.level=0.05)
pwr.f2.test(u=800, v=20, f2=0.1, sig.level=0.05)
pwr.f2.test(u=30, v=800, f2=0.01, sig.level=0.05)
pwr.f2.test(u=30, v=800, f2=0.02, sig.level=0.05)
pwr.f2.test(u=25, v=800, f2=0.02, sig.level=0.05)
install.packages("tree")
?tree
library(tree)
?tree
source('~/GitHub/HVSL_replication/life_cycle_no_leisure_or_shocks.R')
source('~/.active-rstudio-document')
source('~/GitHub/HVSL_replication/life_cycle_no_leisure_or_shocks.R')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
?seq
?matrix
?rep
source('~/.active-rstudio-document')
source('~/GitHub/HVSL_replication/life_cycle_no_leisure_or_shocks.R')
source('~/GitHub/HVSL_replication/life_cycle_no_leisure_or_shocks.R')
source('~/GitHub/HVSL_replication/life_cycle_no_leisure_or_shocks.R')
source('~/GitHub/HVSL_replication/life_cycle_no_leisure_or_shocks.R')
source('~/GitHub/HVSL_replication/life_cycle_no_leisure_or_shocks.R')
?max
source('~/Desktop/fib.R')
source('~/Desktop/fib.R')
source('~/Desktop/fib.R')
result
source('~/Desktop/fib.R')
result
fib(1)
source('~/Desktop/fib.R')
source('~/Desktop/fib.R')
source('~/.active-rstudio-document')
source('~/Desktop/fib.R')
source('~/Desktop/fib.R')
source('~/.active-rstudio-document')
source('~/Desktop/fib.R')
source('~/Desktop/fib.R')
source('~/Desktop/fib.R')
?exists
source('~/Desktop/fib.R')
source('~/Desktop/fib.R')
result
fib$cache
enviornment(fib)$cache
environment(fib)$cache
ls(environment(fib)$cache)
?assign
source('~/Desktop/fib.R')
source('~/.active-rstudio-document')
ls(environment(fib)$cache)
fib(5)
fib(100)
fib(1000)
fib(500)
fib(600)
fib(900)
fib(1000)
fib(2000)
fib(1500)
fib(1200)
fib(1500)
install.packages("rbenchmark)
""
")
install.packages("rbenchmark")
library(rbenchmark)
?benchmark
benchmark(fib(100), replications=1000)
test <- function(x) {}
test <- function(x) {
fib(x)
fib$cache_reset()
}
test(5)
rm(list=ls())
?Rand
?rand
?random
?runif
?randint
benchmark(test(200), replications=500)
library(benchmark)
library(rbenchmark)
benchmark(test(200), replications=500)
source('~/Desktop/fib.R')
rm(list=ls())
rm(ls())
source(fib.R)
source("fib.R)
")
source("fib.R")
getwd()
source("Desktop/fib.R")
benchmark(test(500), replications=500)
benchmark(test(100), replications=500)
?enviornment
?env
source('~/Desktop/fib.R')
benchmark(test(100), replications=500)
benchmark(test(100), replications=500)
benchmark(test(100), replications=5000)
benchmark(test(500), replications=500)
benchmark(test(300), replications=500)
results <- benchmark(test(300), replications=500)
names(results)
results$elapsed/results$replications
source('~/Desktop/fib_r.R')
library(memoise)
source('~/Desktop/fib_r.R')
source('~/Desktop/fib_r.R')
source('~/Desktop/fib_r.R')
source('~/Desktop/fib_r.R')
source('~/Desktop/fib_r.R')
source('~/Desktop/fib_r.R')
fib_rm(50)
fib_r(10)
fib_rm(10)
benchmark(fib_r(10))
benchmark(fib_rm(10))
benchmark(fib_r(100))
benchmark(fib_rm(100))
benchmark(fib_r(1000))
benchmark(fib_r(150))
benchmark(fib_rm(150))
benchmark(fib_rm(200))
benchmark(fib_r(200))
source('~/Desktop/fib_r.R')
fib_rm(3)
fib_rm(50)
source('~/Desktop/fib_r.R')
fib(10)
fib(500)
fib(1000)
fib(600)
fib(700)
max(1,2,3,4)
for i in 1:5 {print i}
?for
...
source('~/Desktop/knapsack_bp.R')
source('~/Desktop/knapsack_bp.R')
source('~/Desktop/knapsack_bp.R')
source('~/Desktop/knapsack_bp.R')
source('~/Desktop/knapsack_bp.R')
source('~/Desktop/knapsack_bp.R')
source('~/Desktop/knapsack_bp.R')
knapsack_m(value, weight, size)
value <- c(1,2,3)
weight <- c(1,1,1)
size <- 5
knapsack_m(value, weight, size)
value <- c(1,2,3)
weight <- c(1,1,1)
size <- 1
knapsack_m(value, weight, size)
value <- c(1,2,3)
weight <- c(1,1,1)
size <- 2
knapsack_m(value, weight, size)
source('~/.active-rstudio-document')
knapsack_m(value, weight, 4)
knapsack_m(value, weight, 2)
source('~/Desktop/knapsack_bp.R')
knapsack_m(value, weight, 2)
knapsack_m(value, weight, 5)
source('~/.active-rstudio-document')
knapsack_m(value, weight, size)
source('~/.active-rstudio-document')
knapsack_m(value, weight, size)
source('~/Desktop/knapsack_bp.R')
source('~/Desktop/knapsack_bp.R')
knapsack_m(value, weight, size)
citation()
?exact
?fisher
x <- rbind(c(17, 1), c(24,32))
x
fisher.test(x)
test <- fisher.test(x)
names(test)
test$p.value*79
readLines(n=1)
source('~/Desktop/write_test.R')
source('~/Desktop/write_test.R')
